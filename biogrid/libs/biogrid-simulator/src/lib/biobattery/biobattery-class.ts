import {
  Battery,
  Distance,
  Energy,
  ItemPosition,
  Validatable,
  validate,
} from '@biogrid/grid-simulator';
import { SMALL_BATTERY } from '../config';

interface BatteryParams {
  xPos: number;
  yPos: number;
  id: string;
  resistance: number;
  initialEnergyInJoules?: Energy;
  maxCapacityInJoules?: Energy;
}

const BATTERY_PARAMS_DEFAULT: BatteryParams = {
  xPos: 0,
  yPos: 0,
  id: '',
  resistance: 0,
  initialEnergyInJoules: SMALL_BATTERY.DEFAULT_START_ENERGY,
  maxCapacityInJoules: SMALL_BATTERY.MAX_CAPACITY,
};

export class BioBattery implements Battery {
  private energyInJoules: Energy;
  private readonly maxCapacity: Energy;
  // name of the grid item is unique to the battery type, but they have a similar prefix
  gridItemName: string;
  // The resistance measured in ohms
  gridItemResistance: number;
  private readonly relativePosition: ItemPosition;

  /**
   * Take in a relativePosition which is generated by the grid class so that batteries
   * are evenly spaced out.
   * The relativePositions have been verified in the Biogrid class
   * @param x Distance from the left edge of the town
   * @param y Distance from the top edge of the town
   */
  constructor(params: BatteryParams) {
    const paramsWithDefault = { ...BATTERY_PARAMS_DEFAULT, ...params };
    this.relativePosition = {
      x: paramsWithDefault.xPos,
      y: paramsWithDefault.yPos,
    };
    if (
      !this.validateInputs(
        paramsWithDefault.initialEnergyInJoules || 0,
        paramsWithDefault.maxCapacityInJoules || 0
      )
    ) {
      // TODO return a tuple of from validate to with the boolean and unpassed validations
      throw new Error(
        `Cannot create a battery with values: (${paramsWithDefault.initialEnergyInJoules}, ${paramsWithDefault.maxCapacityInJoules})`
      );
    }
    this.energyInJoules = paramsWithDefault.initialEnergyInJoules || 0;
    this.maxCapacity = paramsWithDefault.maxCapacityInJoules || 0;
    this.gridItemName = paramsWithDefault.id;
    this.gridItemResistance = paramsWithDefault.resistance;
  }

  getRelativePosition() {
    return this.relativePosition;
  }

  startCharging(inputPower: Energy): void {
    if (this.energyInJoules + inputPower > this.maxCapacity) {
      this.energyInJoules = this.maxCapacity;
    }
    this.energyInJoules += inputPower;
  }

  // TODO implement when you use a formula for charging a battery
  stopCharging(): void {}

  supplyPower(outputenergy: Energy): Energy {
    if (this.energyInJoules - outputenergy < 0) {
      //TODO implement the function to notify the request with amount of output left
      const temp: Energy = this.energyInJoules;
      this.energyInJoules = 0;
      return temp;
    }
    this.energyInJoules -= outputenergy;
    return outputenergy;
  }

  private validateInputs(
    energyInJoules: Energy,
    maxCapacity: Energy = this.maxCapacity
  ) {
    const batteryValidator: Validatable = {
      value: energyInJoules,
      max: maxCapacity,
      isPositive: energyInJoules >= 0 && maxCapacity >= 0,
    };
    return validate(batteryValidator);
  }

  getEnergyInJoules(): Energy {
    return this.energyInJoules;
  }

  getMaxCapacity(): Energy {
    return this.maxCapacity;
  }

  isEmpty(): boolean {
    return this.energyInJoules === 0;
  }

  isFull(): boolean {
    return this.energyInJoules === this.maxCapacity;
  }
}
